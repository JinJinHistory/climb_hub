// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DATABASE_URL")
}

model Brand {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String   @db.VarChar(255)
  logoUrl     String?  @map("logo_url") @db.Text
  websiteUrl  String?  @map("website_url") @db.Text
  createdAt   DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt   DateTime @updatedAt @map("updated_at") @db.Timestamptz(6)

  // Relations
  gyms Gym[]

  @@map("brands")
}

model Gym {
  id              String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  brandId         String   @map("brand_id") @db.Uuid
  name            String   @db.VarChar(255)
  branchName      String   @map("branch_name") @db.VarChar(255)
  instagramUrl    String?  @map("instagram_url") @db.Text
  instagramHandle String?  @map("instagram_handle") @db.VarChar(255)
  address         String?  @db.Text
  phone           String?  @db.VarChar(50)
  latitude        Decimal? @db.Decimal(10, 8)
  longitude       Decimal? @db.Decimal(11, 8)
  isActive        Boolean  @default(true) @map("is_active")
  createdAt       DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt       DateTime @updatedAt @map("updated_at") @db.Timestamptz(6)

  // Relations
  brand         Brand          @relation(fields: [brandId], references: [id], onDelete: Cascade)
  routeUpdates  RouteUpdate[]
  crawlLogs     CrawlLog[]

  @@map("gyms")
}

model RouteUpdate {
  id                String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  gymId             String   @map("gym_id") @db.Uuid
  type              RouteUpdateType
  updateDate        DateTime @map("update_date") @db.Date
  title             String?  @db.VarChar(500)
  description       String?  @db.Text
  instagramPostUrl  String?  @map("instagram_post_url") @db.Text
  instagramPostId   String?  @map("instagram_post_id") @db.VarChar(255)
  imageUrls         String[] @map("image_urls") @db.Text
  rawCaption        String?  @map("raw_caption") @db.Text
  parsedData        Json?    @map("parsed_data")
  isVerified        Boolean  @default(false) @map("is_verified")
  createdAt         DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt         DateTime @updatedAt @map("updated_at") @db.Timestamptz(6)

  // Relations
  gym Gym @relation(fields: [gymId], references: [id], onDelete: Cascade)

  @@map("route_updates")
}

model CrawlLog {
  id           String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  gymId        String      @map("gym_id") @db.Uuid
  status       CrawlStatus
  postsFound   Int         @default(0) @map("posts_found")
  postsNew     Int         @default(0) @map("posts_new")
  errorMessage String?     @map("error_message") @db.Text
  startedAt    DateTime    @map("started_at") @db.Timestamptz(6)
  completedAt  DateTime?   @map("completed_at") @db.Timestamptz(6)
  createdAt    DateTime    @default(now()) @map("created_at") @db.Timestamptz(6)

  // Relations
  gym Gym @relation(fields: [gymId], references: [id], onDelete: Cascade)

  @@map("crawl_logs")
}

enum RouteUpdateType {
  newset
  removal
  partial_removal
  announcement
}

enum CrawlStatus {
  success
  failed
  partial
}
